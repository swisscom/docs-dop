<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DOP Deploment Orchestrator for Puppet</title>
    <link>https://swisscom.github.io/docs-dop/</link>
    <description>Recent content on DOP Deploment Orchestrator for Puppet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 31 May 2017 12:41:27 +0200</lastBuildDate>
    
	<atom:link href="https://swisscom.github.io/docs-dop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>custom</title>
      <link>https://swisscom.github.io/docs-dop/command_plugins/custom/</link>
      <pubDate>Wed, 26 Apr 2017 12:09:16 +0200</pubDate>
      
      <guid>https://swisscom.github.io/docs-dop/command_plugins/custom/</guid>
      <description>The custom command plugin executes commands localy on the node DOPi is running on.
   Plugin Name Since Version     custom 0.1    Plugin Parameters exec (required)    Key Allowed Values Default Since Version     exec String nil 0.1    The command the plugin should execute for every node. arguments (optional)    Key Allowed Values Default Since Version     arguments String,Hash,Array &amp;rdquo;&amp;rdquo; 0.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://swisscom.github.io/docs-dop/overview/about/</link>
      <pubDate>Wed, 03 May 2017 15:42:43 +0200</pubDate>
      
      <guid>https://swisscom.github.io/docs-dop/overview/about/</guid>
      <description>What is DOP? DOP is a collection of ruby gems and rails applications which each do it&amp;rsquo;s part to automate your deployment. Each component solves a separate problem and can be used on it&amp;rsquo;s own. But they can all be combinet to completely automate the deployment of your infrastructure over a single API.
What it isn&amp;rsquo;t? DOP is not another configuration management tool. The goal is not to replace Puppet but to bridge the gap from describing your infrastructure to deploying them in your IAAS platform.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://swisscom.github.io/docs-dop/overview/architecture/</link>
      <pubDate>Mon, 10 Apr 2017 16:34:07 +0200</pubDate>
      
      <guid>https://swisscom.github.io/docs-dop/overview/architecture/</guid>
      <description> TBD </description>
    </item>
    
    <item>
      <title>ssh/custom</title>
      <link>https://swisscom.github.io/docs-dop/command_plugins/ssh/custom/</link>
      <pubDate>Wed, 26 Apr 2017 15:37:53 +0200</pubDate>
      
      <guid>https://swisscom.github.io/docs-dop/command_plugins/ssh/custom/</guid>
      <description>This plugin executes custom commands on every node in the step over ssh.
   Plugin Name Since Version     ssh/custom 0.1    Plugin Parameters exec (required)    Key Allowed Values Default Since Version     exec String nil 0.1    The command the plugin should execute for every node. arguments (optional)    Key Allowed Values Default Since Version     arguments String,Hash,Array &amp;rdquo;&amp;rdquo; 0.</description>
    </item>
    
    <item>
      <title>Pre-processor</title>
      <link>https://swisscom.github.io/docs-dop/plan/pre_processor/</link>
      <pubDate>Tue, 18 Apr 2017 14:48:44 +0200</pubDate>
      
      <guid>https://swisscom.github.io/docs-dop/plan/pre_processor/</guid>
      <description>The pre-processor is something which only applies if you load plans from a file and not if you use dop as a library and feed the plan as a hash. The pre-processor renders the plan before it gets loaded by the parser.
The only feature implemented at the moment is includes, which allows you to split your plans into multiple files and possible reuse parts between different plans.
In the future this may also be used to do templating, but this is not implemented yet.</description>
    </item>
    
    <item>
      <title>ssh/puppet_agent_run</title>
      <link>https://swisscom.github.io/docs-dop/command_plugins/ssh/puppet_agent_run/</link>
      <pubDate>Wed, 31 May 2017 12:41:27 +0200</pubDate>
      
      <guid>https://swisscom.github.io/docs-dop/command_plugins/ssh/puppet_agent_run/</guid>
      <description>This plugin runs puppet on a node and features some important workarounds for common problems encountered when doing so, like waiting if a run is already in progress or doing reruns on errors if configured.
   Plugin Name Since Version     ssh/puppet_agent_run 0.1    Plugin Parameters rerun_on_change (optional)    Key Allowed Values Default Since Version     rerun_on_change true,false false 0.</description>
    </item>
    
    <item>
      <title>Global Settings</title>
      <link>https://swisscom.github.io/docs-dop/plan/global_settings/</link>
      <pubDate>Tue, 18 Apr 2017 13:41:46 +0200</pubDate>
      
      <guid>https://swisscom.github.io/docs-dop/plan/global_settings/</guid>
      <description>Global settings are on the top level of a plan. This are settings which affect the whole plan or represent default values which can be changed in other places.
name (optional)    Key Allowed Values Default Since Version     name /[\w-]+/ (sha1 of content) 0.1    The name of the plan is the handle under which dop will store it in the plan cache.</description>
    </item>
    
    <item>
      <title>Credentials</title>
      <link>https://swisscom.github.io/docs-dop/plan/credentials/</link>
      <pubDate>Tue, 18 Apr 2017 13:35:06 +0200</pubDate>
      
      <guid>https://swisscom.github.io/docs-dop/plan/credentials/</guid>
      <description>The credentials hash can hold credentials used to login to systems, APIs or to set passwords or keys during setup.
Example:
credentials: &#39;linux_staging_login&#39;: type: :username_password username: &#39;root&#39; password: &#39;foo&#39; &#39;linux_prod_login&#39;: type: :ssh_key private_key: &#39;/home/root/.ssh/id_dsa&#39; &#39;windows_staging_login&#39;: type: :username_password username: &#39;administrator&#39; password: &#39;winfoo&#39; &#39;windows_prod_login&#39;: type: :kerberos realm: &#39;FOOOO&#39;  The various DOPi plugins can use these credentials to login to a node if the type is supported by the plugin. It is recommended to use the set_plugin_defaults mechanic to set this credentials so it does not have to be specified in every command separately.</description>
    </item>
    
    <item>
      <title>winrm/puppet_agent_run</title>
      <link>https://swisscom.github.io/docs-dop/command_plugins/winrm/puppet_agent_run/</link>
      <pubDate>Wed, 31 May 2017 12:41:27 +0200</pubDate>
      
      <guid>https://swisscom.github.io/docs-dop/command_plugins/winrm/puppet_agent_run/</guid>
      <description>This plugin runs puppet on a node and features some important workarounds for common problems encountered when doing so, like waiting if a run is already in progress or doing reruns on errors if configured.
   Plugin Name Since Version     winrm/puppet_agent_run 0.13.0    Plugin Parameters rerun_on_change (optional)    Key Allowed Values Default Since Version     rerun_on_change true,false false 0.</description>
    </item>
    
    <item>
      <title>Hooks</title>
      <link>https://swisscom.github.io/docs-dop/plan/hooks/</link>
      <pubDate>Tue, 18 Apr 2017 15:32:26 +0200</pubDate>
      
      <guid>https://swisscom.github.io/docs-dop/plan/hooks/</guid>
      <description>Hooks can be defined as a hash of programs that will be called before and/or after a node is created and/or updated and/or destroyed.
A hook consists of an array of strings that represent paths to programs to be be executed at particular deployment stage.
Following is a list of supported hooks: - pre_create_vm - a set of programs executed before node creation. - post_create_vm - a set of programs executed after node creation.</description>
    </item>
    
    <item>
      <title>Infrastructures</title>
      <link>https://swisscom.github.io/docs-dop/plan/infrastructures/</link>
      <pubDate>Tue, 18 Apr 2017 13:36:57 +0200</pubDate>
      
      <guid>https://swisscom.github.io/docs-dop/plan/infrastructures/</guid>
      <description>The infrastructures hash holds information about cloud providers. Each entry in an infrastructures hash describes a certain infrastructure or cloud if you want. It is of hash type. Following is a list of keys:
 type - is the type of the infrastructure provider. It is a reuired property. The infrastructure provider type can be specified by following values:
 baremetal, ovirt or rhev, openstack, vsphere or vmware.  Please note that rhev and ovirt are synonyms and so are vsphere and vmware.</description>
    </item>
    
    <item>
      <title>Nodes</title>
      <link>https://swisscom.github.io/docs-dop/plan/nodes/</link>
      <pubDate>Tue, 18 Apr 2017 13:37:04 +0200</pubDate>
      
      <guid>https://swisscom.github.io/docs-dop/plan/nodes/</guid>
      <description>The nodes hash holds the basic information about all nodes you want to create and use. Each entry in the nodes hash is itself a hash. A single entry of this is called a node hash (singular). Each node hash starts with the node name as a key:
nodes: mysql01.example.com: ... ... ...  IMPORTANT: The node name must be unique for each deployment. Please keep this in mind when combining several deployments into a single deployment file.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://swisscom.github.io/docs-dop/plan/configuration/</link>
      <pubDate>Tue, 18 Apr 2017 13:37:15 +0200</pubDate>
      
      <guid>https://swisscom.github.io/docs-dop/plan/configuration/</guid>
      <description>The configurations hash contains the hiera configuration for the deployment. The sub-hashes map the hierarchy defined in the hiera.conf.
Example:
hosts/foo/mynode.example.com Maps to: configuration: hosts: foo: mynode.example.com  You can use all the hierarchy levels you like, but be aware that the hiera plugin will only look them up if the node it is looking the key up for is in the plan. Defaults which are relevant to your deployment should therefor be set inside the plan, while global defaults should go into your global hiera data.</description>
    </item>
    
    <item>
      <title>Steps</title>
      <link>https://swisscom.github.io/docs-dop/plan/steps/</link>
      <pubDate>Tue, 18 Apr 2017 13:37:23 +0200</pubDate>
      
      <guid>https://swisscom.github.io/docs-dop/plan/steps/</guid>
      <description>The steps array is a list of commands that have to be executed in the correct order. Each element in the array contains a hash of settings which describe the step, the nodes involved and the command to execute.
Example:
steps: - name: run_puppet_on_mysql nodes: - mysql01.example.com command: ssh_run_puppet - name: run_puppet_on_webserver roles: - httpd_basic - https_special command: ssh_run_puppet - name: reboot_all_nodes nodes: all command: ssh_reboot - name: run_puppet_in_noop_on_proxies roles: - haproxy command: plugin: ssh_puppet_run arguments: &#39;--noop&#39;:  You can define multiple sets of steps which can be executed independently of each other.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://swisscom.github.io/docs-dop/command_plugins/overview/</link>
      <pubDate>Wed, 03 May 2017 16:01:12 +0200</pubDate>
      
      <guid>https://swisscom.github.io/docs-dop/command_plugins/overview/</guid>
      <description>Each plugin uses a specific connector to connect to a node and execute the commands. This is specified by the fist part of the command plugin name, the second part is the name of the function: connector/function
DOP does not aspire to be a configuration management tool on its own and therefor the amount of plugins and possibilities are somewhat limited. The idea is to give you the tools to run puppet in the right order and maybe place or change some needed files to make sure the node can connect to the master.</description>
    </item>
    
  </channel>
</rss>